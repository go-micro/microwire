// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package microwire

import (
	"github.com/go-micro/microwire/broker"
	"github.com/go-micro/microwire/cli"
	"github.com/go-micro/microwire/registry"
	"github.com/go-micro/microwire/transport"
	"go-micro.dev/v4"
)

// Injectors from wire.go:

func newService(options *Options, cliConfig *cli.Config, brokerConfig *broker.Config, registryConfig *registry.Config, transportConfig *transport.Config) (micro.Service, error) {
	cliCli, err := cli.ProvideCli(cliConfig)
	if err != nil {
		return nil, err
	}
	diFlags, err := broker.ProvideFlags(brokerConfig, cliConfig, cliCli)
	if err != nil {
		return nil, err
	}
	diDiFlags, err := ProvideFlags(diFlags)
	if err != nil {
		return nil, err
	}
	diParsed, err := cli.ProvideParsed(cliConfig, cliCli)
	if err != nil {
		return nil, err
	}
	diConfig, err := cli.ProvideConfig(diDiFlags, diParsed, cliConfig)
	if err != nil {
		return nil, err
	}
	diConfigor, err := cli.ProvideConfigor(diConfig)
	if err != nil {
		return nil, err
	}
	brokerDiConfig, err := broker.ProvideConfig(diFlags, brokerConfig, diConfigor)
	if err != nil {
		return nil, err
	}
	brokerBroker, err := broker.Provide(brokerDiConfig, brokerConfig)
	if err != nil {
		return nil, err
	}
	service, err := ProvideService(options, brokerBroker)
	if err != nil {
		return nil, err
	}
	return service, nil
}
