// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ndi

import (
	"github.com/go-micro/microwire/v5"
	"github.com/go-micro/microwire/v5/broker"
	"github.com/go-micro/microwire/v5/cli"
	"github.com/go-micro/microwire/v5/registry"
	"github.com/go-micro/microwire/v5/store"
	"github.com/go-micro/microwire/v5/transport"
)

// Injectors from wire.go:

func newService(options *micro.MwOptions, cliConfig *cli.Config, brokerConfig *broker.Config, registryConfig *registry.Config, storeConfig *store.Config, transportConfig *transport.Config) (micro.Service, error) {
	cliCli, err := cli.ProvideCli(cliConfig)
	if err != nil {
		return nil, err
	}
	diFlags, err := broker.ProvideFlags(brokerConfig, cliConfig, cliCli)
	if err != nil {
		return nil, err
	}
	registryDiFlags, err := registry.ProvideFlags(registryConfig, cliConfig, cliCli)
	if err != nil {
		return nil, err
	}
	transportDiFlags, err := transport.ProvideFlags(transportConfig, cliConfig, cliCli)
	if err != nil {
		return nil, err
	}
	diDiFlags, err := ProvideFlags(diFlags, registryDiFlags, transportDiFlags)
	if err != nil {
		return nil, err
	}
	diParsed, err := cli.ProvideParsed(cliConfig, cliCli)
	if err != nil {
		return nil, err
	}
	diConfig, err := cli.ProvideConfig(diDiFlags, diParsed, cliConfig)
	if err != nil {
		return nil, err
	}
	brokerBroker, err := broker.Provide(diConfig, brokerConfig)
	if err != nil {
		return nil, err
	}
	registryRegistry, err := registry.Provide(diConfig, registryConfig)
	if err != nil {
		return nil, err
	}
	storeStore, err := store.Provide(diConfig, storeConfig)
	if err != nil {
		return nil, err
	}
	transportTransport, err := transport.Provide(diConfig, transportConfig)
	if err != nil {
		return nil, err
	}
	service, err := ProvideAllService(options, brokerBroker, registryRegistry, storeStore, transportTransport)
	if err != nil {
		return nil, err
	}
	return service, nil
}
