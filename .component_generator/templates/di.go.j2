package {{Name}}

import (
	"fmt"
	{{di_go.Imports}}

	mCli "github.com/go-micro/microwire/v5/cli"
	"github.com/go-micro/microwire/v5/di"
	"github.com/go-micro/microwire/v5/config"
	"github.com/google/wire"
)

type DiFlags struct {
	Plugin    string
	{{di_go.DiFlags.Fields}}
}

// DiConfig is marker that DiFlags has been parsed into Config
type DiConfig struct{}

const (
	cliArgPlugin    = "{{Name}}"
	{{di_go.Consts}}
)

func ProvideFlags(
	config *Config,
	cliConfig *mCli.Config,
	c mCli.Cli,
) (*DiFlags, error) {
	if cliConfig.Cli.NoFlags {
		// Defined silently ignore that
		return &DiFlags{}, nil
	}

	result := &DiFlags{}

	if err := c.Add(
		mCli.Name(mCli.PrefixName(cliConfig.Cli.ArgPrefix, cliArgPlugin)),
		mCli.Usage("{{di_go.ProvideFlags.Plugin.Usage}}"),
		mCli.Default(config.{{CapsName}}.Plugin),
		mCli.EnvVars(mCli.PrefixEnv(cliConfig.Cli.ArgPrefix, cliArgPlugin)),
		mCli.Destination(&result.Plugin),
	); err != nil {
		return nil, err
	}

	{{di_go.ProvideFlags.Body}}

	return result, nil
}

func ProvideConfig(
	_ di.DiConfig,
	flags *DiFlags,
	config *Config,
	cliConfig *mCli.Config,
	configor config.Config,
) (DiConfig, error) {
	defConfig := NewConfig()

	if configor != nil {
		if err := configor.Scan(defConfig); err != nil {
			return DiConfig{}, err
		}
	}
	if err := config.Merge(defConfig); err != nil {
		return DiConfig{}, err
	}

	if cliConfig.Cli.NoFlags {
		// Dont parse flags if NoFlags has been given
		return DiConfig{}, nil
	}

	defConfig = NewConfig()
	defConfig.{{CapsName}}.Plugin = flags.Plugin
	{{di_go.ProvideConfig.Body}}
	if err := config.Merge(defConfig); err != nil {
		return DiConfig{}, err
	}

	return DiConfig{}, nil
}

func ProvideConfigNoFlags(
	config *Config,
	configor config.Config,
) (DiConfig, error) {
	defConfig := NewConfig()

	if configor != nil {
		if err := configor.Scan(defConfig); err != nil {
			return DiConfig{}, err
		}
	}
	if err := config.Merge(defConfig); err != nil {
		return DiConfig{}, err
	}

	return DiConfig{}, nil
}

func Provide(
	// Marker so cli has been merged into Config
	_ DiConfig,

	config *Config,
) ({{CapsName}}, error) {
	if !config.{{CapsName}}.Enabled {
		// Not enabled silently ignore that
		return nil, nil
	}

	b, err := Plugins.Get(config.{{CapsName}}.Plugin)
	if err != nil {
		return nil, fmt.Errorf("unknown {{Name}}: %v", err)
	}

	{{di_go.Provide.Body}}

	return b(opts...), nil
}

var DiSet = wire.NewSet(ProvideFlags, ProvideConfig, Provide)
var DiNoFlagsSet  = wire.NewSet(ProvideConfigNoFlags, Provide)
