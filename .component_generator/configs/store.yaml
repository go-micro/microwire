---
Name: store
CapsName: Store

di_go:
  Imports: ""

  Consts: |-
    cliArgAddresses = "store_address"
    cliArgDatabase  = "store_database"
    cliArgTable     = "store_table"

  ProvideFlags:
    Plugin:
      Usage: "Store for pub/sub. http, nats, rabbitmq"

    Body: |-
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgAddresses)),
        cli.Usage("List of store addresses"),
        cli.Default(config.Addresses),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgAddresses)),
      ); err != nil {
        return DiFlags{}, err
      }

      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgDatabase)),
        cli.Usage("Database option for the underlying store"),
        cli.Default(config.Database),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgDatabase)),
      ); err != nil {
        return DiFlags{}, err
      }

      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgTable)),
        cli.Usage("Table option for the underlying store"),
        cli.Default(config.Table),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgTable)),
      ); err != nil {
        return DiFlags{}, err
      }

  ProvideConfig:
    Body: |-
      if f, ok := c.Get(cliArgAddresses); ok {
        defConfig.Addresses = cli.FlagValue(f, []string{})
      }
      if f, ok := c.Get(cliArgDatabase); ok {
        defConfig.Database = cli.FlagValue(f, "")
      }
      if f, ok := c.Get(cliArgTable); ok {
        defConfig.Table = cli.FlagValue(f, "")
      }

  Provide:
    Args: ""
    Body: |-
      if len(config.Addresses) > 0 {
        opts = append(opts, Nodes(config.Addresses...))
      }
      if len(config.Database) > 0 {
        opts = append(opts, Database(config.Database))
      }
      if len(config.Table) > 0 {
        opts = append(opts, Table(config.Table))
      }

config_store_go:
  NewConfig:
    Enabled: "false"
    Plugin: ""
    Fields: |-
      Addresses: []string{},
      Database:  "",
      Table:     "",

  Config:
    Fields: |-
      Addresses []string `json:"addresses,omitempty" yaml:"Addresses,omitempty"`
      Database  string   `json:"database,omitempty" yaml:"Database,omitempty"`
      Table     string   `json:"table,omitempty" yaml:"Table,omitempty"`

  ConfigMerge:
    Fields: |-
      d.Addresses = src.Addresses
      d.Database = src.Database
      d.Table = src.Table
