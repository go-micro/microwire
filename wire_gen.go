// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package microwire

import (
	"github.com/go-micro/microwire/broker"
	"github.com/go-micro/microwire/registry"
	"github.com/go-micro/microwire/transport"
	"github.com/go-micro/microwire/wire"
	"github.com/urfave/cli/v2"
	"go-micro.dev/v4"
)

// Injectors from wire.go:

func DefaultApp(opts ...wire.Option) (*cli.App, error) {
	initializeServiceFunc := ProvideDefaultServiceInitializer()
	options := wire.ProvideOptions(opts, initializeServiceFunc)
	brokerFlags := broker.ProvideBrokerFlags(options)
	registryFlags := registry.ProvideRegistryFlags(options)
	transportFlags := transport.ProvideTransportFlags(options)
	internalFlags := ProvideDefaultFlags(options, brokerFlags, registryFlags, transportFlags)
	app := wire.ProvideApp(options, internalFlags)
	return app, nil
}

func DefaultService(ctx *cli.Context, opts *wire.Options) (micro.Service, error) {
	brokerOptions := broker.ProvideBrokerOptions(opts, ctx)
	brokerBroker, err := broker.Provide(brokerOptions)
	if err != nil {
		return nil, err
	}
	registryOptions := registry.ProvideRegistryOptions(opts, ctx)
	registryRegistry, err := registry.Provide(registryOptions)
	if err != nil {
		return nil, err
	}
	transportOptions := transport.ProvideTransportOptions(opts, ctx)
	transportTransport, err := transport.Provide(transportOptions)
	if err != nil {
		return nil, err
	}
	v := ProvideDefaultMicroOpts(opts, brokerBroker, registryRegistry, transportTransport)
	service := wire.ProvideMicroService(opts, ctx, v)
	return service, nil
}
