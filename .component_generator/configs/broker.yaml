---
Name: broker
CapsName: Broker

di_go:
  Imports: ""
  Consts: |-
    cliArgAddresses = "broker_address"

  ProvideFlags:
    Plugin:
      Usage: "Broker for pub/sub. http, nats, rabbitmq"

    Body: |-
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.Cli.ArgPrefix, cliArgAddresses)),
        cli.Usage("List of broker addresses"),
        cli.Default(config.Broker.Addresses),
        cli.EnvVars(cli.PrefixEnv(cliConfig.Cli.ArgPrefix, cliArgAddresses)),
      ); err != nil {
        return DiFlags{}, err
      }

  ProvideConfig:
    Body: |-
      if f, ok := c.Get(cliArgAddresses); ok {
        defConfig.Broker.Addresses = cli.FlagValue(f, []string{})
      }
  Provide:
    Args: ""
    Body: |-
      if len(config.Broker.Addresses) > 0 {
        opts = append(opts, Addrs(config.Broker.Addresses...))
      }

config_store_go:
  NewConfig:
    Enabled: "true"
    Plugin: "http"
    Fields: |-
      Addresses: []string{},

  Config:
    Fields: |-
      Addresses []string `json:"addresses,omitempty" yaml:"Addresses,omitempty"`

  ConfigMerge:
    Fields: |-
      d.Broker.Addresses = src.Broker.Addresses
