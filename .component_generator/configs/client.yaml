---
Name: client
CapsName: Client

di_go:
  Imports: |-
    "time"
    "github.com/go-micro/microwire/v5/broker"
    "github.com/go-micro/microwire/v5/registry"
    "github.com/go-micro/microwire/v5/transport"

  Consts: |-
    cliArgPoolSize = "client_pool_size"
    cliArgPoolTTL = "client_pool_ttl"
    cliArgPoolRequestTimeout = "client_request_timeout"
    cliArgPoolRetries = "client_retries"

  ProvideFlags:
    Plugin:
      Usage: "Client for go-micro, eg: rpc"

    Body: |-
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgPoolSize)),
        cli.Usage("Sets the client connection pool size"),
        cli.Default(config.PoolSize),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgPoolSize)),
      ); err != nil {
        return DiFlags{}, err
      }
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgPoolTTL)),
        cli.Usage("Sets the client connection pool ttl, e.g: 500ms, 5s, 1m"),
        cli.Default(config.PoolTTL),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgPoolTTL)),
      ); err != nil {
        return DiFlags{}, err
      }
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgPoolRequestTimeout)),
        cli.Usage("Sets the client request timeout, e.g: 500ms, 5s, 1m"),
        cli.Default(config.PoolRequestTimeout),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgPoolRequestTimeout)),
      ); err != nil {
        return DiFlags{}, err
      }
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgPoolRetries)),
        cli.Usage("Sets the client retries"),
        cli.Default(config.PoolRetries),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgPoolRetries)),
      ); err != nil {
        return DiFlags{}, err
      }
  
  ProvideConfig:
    Body: |-
      if f, ok := c.Get(cliArgPoolSize); ok {
        defConfig.PoolSize = cli.FlagValue(f, defConfig.PoolSize)
      }
      if f, ok := c.Get(cliArgPoolTTL); ok {
        defConfig.PoolTTL = cli.FlagValue(f, defConfig.PoolTTL)
      }
      if f, ok := c.Get(cliArgPoolRequestTimeout); ok {
        defConfig.PoolRequestTimeout = cli.FlagValue(f, defConfig.PoolRequestTimeout)
      }
      if f, ok := c.Get(cliArgPoolRetries); ok {
        defConfig.PoolRetries = cli.FlagValue(f, defConfig.PoolRetries)
      }

  Provide:
    Args: |-
      broker broker.Broker,
      registry registry.Registry,
      transport transport.Transport,

    Body:  |-
      opts = append(opts, PoolSize(config.PoolSize))
      d, err := time.ParseDuration(config.PoolTTL)
      if err != nil {
        return nil, fmt.Errorf("failed to parse client_pool_ttl: %v", config.PoolTTL)
      }
      opts = append(opts, RequestTimeout(d))
      d, err = time.ParseDuration(config.PoolRequestTimeout)
      if err != nil {
        return nil, fmt.Errorf("failed to parse client_request_timeout: %v", config.PoolRequestTimeout)
      }

      opts = append(
        opts,
        PoolTTL(d),
        Retries(config.PoolRetries),
        Broker(broker),
        Registry(registry),
        Transport(transport),
        WrapCall(config.WrapCall...),
      )

config_store_go:
  NewConfig:
    Enabled: "true"
    Plugin: "rpc"
    Fields: |-
      PoolSize: 1,
      PoolTTL: "1m",
      PoolRequestTimeout: "5s",
      PoolRetries: 1,
      WrapCall: []CallWrapper{},

  Config:
    Fields: |-
      PoolSize             int      `json:"pool_size,omitempty" yaml:"PoolSize,omitempty"`
      PoolTTL              string   `json:"pool_ttl,omitempty" yaml:"PoolTTL,omitempty"`
      PoolRequestTimeout   string   `json:"pool_request_timeout,omitempty" yaml:"PoolRequestTimeout,omitempty"`
      PoolRetries          int      `json:"pool_retries,omitempty" yaml:"PoolRetries,omitempty"`
      WrapCall []CallWrapper `json:"-" yaml:"-"`

  ConfigMerge:
    Fields: |-
      d.PoolSize = src.PoolSize
      d.PoolTTL = src.PoolTTL
      d.PoolRequestTimeout = src.PoolRequestTimeout
      d.PoolRetries = src.PoolRetries
