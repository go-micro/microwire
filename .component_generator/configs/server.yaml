---
Name: server
CapsName: Server

di_go:
  Imports: |-
    "time"
    "github.com/go-micro/microwire/v5/logger"
    "github.com/go-micro/microwire/v5/broker"
    "github.com/go-micro/microwire/v5/registry"
    "github.com/go-micro/microwire/v5/transport"

  Consts: |-
    cliArgAddress = "server_address"
    cliArgID = "server_id"
    cliArgMetadata = "server_metadata"
    cliArgName = "server_name"
    cliArgVersion = "server_version"
    cliArgRegisterTTL = "server_register_ttl"
    cliArgRegisterInterval = "server_register_interval"

  ProvideFlags:
    Plugin:
      Usage: "Server for go-micro; rpc"

    Body: |-
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgAddress)),
        cli.Usage("Bind address for the server, eg: 127.0.0.1:8080"),
        cli.Default(config.Address),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgAddress)),
      ); err != nil {
        return DiFlags{}, err
      }
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgID)),
        cli.Usage("Id of the server. Auto-generated if not specified"),
        cli.Default(config.ID),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgID)),
      ); err != nil {
        return DiFlags{}, err
      }
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgMetadata)),
        cli.Usage(" A list of key-value pairs defining metadata, e.g.: version=1.0.0"),
        cli.Default([]string{}),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgMetadata)),
      ); err != nil {
        return DiFlags{}, err
      }
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgName)),
        cli.Usage("Name of the server. go.micro.srv.example"),
        cli.Default(config.Name),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgName)),
      ); err != nil {
        return DiFlags{}, err
      }
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgVersion)),
        cli.Usage("Version of the server. 1.1.0"),
        cli.Default(config.Version),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgVersion)),
      ); err != nil {
        return DiFlags{}, err
      }
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgRegisterTTL)),
        cli.Usage("Register TTL in seconds"),
        cli.Default(config.RegisterTTL),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgRegisterTTL)),
      ); err != nil {
        return DiFlags{}, err
      }
      if err := c.Add(
        cli.Name(cli.PrefixName(cliConfig.ArgPrefix, cliArgRegisterInterval)),
        cli.Usage("Register interval in seconds"),
        cli.Default(config.RegisterInterval),
        cli.EnvVars(cli.PrefixEnv(cliConfig.ArgPrefix, cliArgRegisterInterval)),
      ); err != nil {
        return DiFlags{}, err
      }
  ProvideConfig:
    Body: |-
      if f, ok := c.Get(cli.PrefixName(cliConfig.ArgPrefix, cliArgAddress)); ok {
        defConfig.Address = cli.FlagValue(f, "")
      }
      if f, ok := c.Get(cli.PrefixName(cliConfig.ArgPrefix, cliArgID)); ok {
        defConfig.ID = cli.FlagValue(f, "")
      }
      if f, ok := c.Get(cli.PrefixName(cliConfig.ArgPrefix, cliArgName)); ok {
        defConfig.Name = cli.FlagValue(f, "")
      }
      if f, ok := c.Get(cli.PrefixName(cliConfig.ArgPrefix, cliArgVersion)); ok {
        defConfig.Version = cli.FlagValue(f, "")
      }
      if f, ok := c.Get(cli.PrefixName(cliConfig.ArgPrefix, cliArgRegisterTTL)); ok {
        defConfig.RegisterTTL = cli.FlagValue(f, defConfig.RegisterTTL)
      }
      if f, ok := c.Get(cli.PrefixName(cliConfig.ArgPrefix, cliArgRegisterInterval)); ok {
        defConfig.RegisterInterval = cli.FlagValue(f, defConfig.RegisterInterval)
      }
  Provide:
    Args: |-
      broker broker.Broker,
      log logger.Logger,
      registry registry.Registry,
      transport transport.Transport,
    Body: |-
      if len(config.Address) > 0 {
        opts = append(opts, Address(config.Address))
      }
      if len(config.ID) > 0 {
        opts = append(opts, Id(config.ID))
      }
      if len(config.Name) > 0 {
        opts = append(opts, Name(config.Name))
      }
      if len(config.Version) > 0 {
        opts = append(opts, Version(config.Version))
      }

      if config.Logger.Enabled {
        loggerFunc, err := logger.Plugins.Get(config.Logger.Plugin)
        if err != nil {
          return nil, fmt.Errorf("{{Name}} unknown logger: %s", config.Logger.Plugin)
        }
        log = loggerFunc(logger.ConfigToOpts(config.Logger)...)
      }

      opts = append(
        opts,
        RegisterInterval(time.Duration(config.RegisterInterval)*time.Second),
        RegisterTTL(time.Duration(config.RegisterTTL)*time.Second),
        Broker(broker),
        Registry(registry),
        Transport(transport),
        WithLogger(log),
      )

      for _, w := range config.WrapSubscriber {
        opts = append(opts, WrapSubscriber(w))
      }
      for _, w := range config.WrapHandler {
        opts = append(opts, WrapHandler(w))
      }

config_store_go:
  Imports: |-
    "github.com/go-micro/microwire/v5/logger"
  NewConfig:
    Enabled: "true"
    Plugin: "rpc"
    Fields: |-
      Address: "",
      ID: "",
      Name: "",
      Version: "",
      Metadata: make(map[string]string),
      RegisterTTL: 60,
      RegisterInterval: 30,
      WrapSubscriber: []SubscriberWrapper{},
      WrapHandler: []HandlerWrapper{},
      Logger: logger.NewConfig(),

    Body: ""

  Config:
    Fields: |-
      Logger    *logger.Config `json:"logger,omitempty" yaml:"Logger,omitempty"`
      Address string `json:"address,omitempty" yaml:"Address,omitempty"`
      ID string `json:"id,omitempty" yaml:"ID,omitempty"`
      Name string `json:"name,omitempty" yaml:"Name,omitempty"`
      Version string `json:"version,omitempty" yaml:"Version,omitempty"`
      Metadata map[string]string `json:"metadata,omitempty" yaml:"Metadata,omitempty"`
      RegisterTTL int `json:"register_ttl,omitempty" yaml:"RegisterTTL,omitempty"`
      RegisterInterval int `json:"register_interval,omitempty" yaml:"RegisterInterval,omitempty"`
      WrapSubscriber []SubscriberWrapper `json:"-" yaml:"-"`
      WrapHandler []HandlerWrapper `json:"-" yaml:"-"`

  ConfigMerge:
    Fields: |-
      d.Address = src.Address
      d.ID = src.ID
      d.Name = src.Name
      d.Version = src.Version
      d.Metadata = src.Metadata
    Body: |-
      d.Logger.Merge(src.Logger)
